#!/bin/bash

#
# install the environment:
# - run docker-compose up  
# - starts containers 
#




# read customer number from command line
SCRIPT_HOME=`dirname $0 | while read a; do cd $a && pwd && break; done`
CUSTOMER_NUMBER=''
PROJECT_NUMBER=''
SITE_NAME='Welance'
LOCAL_URL='localhost'
STAGE_URL=''
LOCAL_ENVIRONMENT='.dev'
STAGE_ENVIRONMENT='.net'

echo "Welcome to welance-craft project setup."

echo -n "Please enter the customer number: "
read answer
if echo "$answer" | grep -qe "^\d\+$" ;then
    CUSTOMER_NUMBER=$answer
else
    echo "invalid customer number $answer, aborting"
    exit 1
fi

# read project number from command line
echo -n "Now enter the project number: "
read answer
if echo "$answer" | grep -q "^\d\+$" ;then
    PROJECT_NUMBER=$answer
else
    echo "invalid project number $answer, aborting"
    exit 1
fi

# read site name from command line
echo -n "And the site name: [$SITE_NAME] "
read answer
if echo "$answer" | grep -q "^\w\+" ;then
    SITE_NAME=$answer
fi

# read local url
echo -n "Url for development: [$LOCAL_URL] "
read answer
if echo "$answer" | grep -q "^\w\+" ;then
    LOCAL_URL=$answer
fi

# build stage url from customer/project number
STAGE_URL="$CUSTOMER_NUMBER.$PROJECT_NUMBER.stage.welance.de"
# build project coordinates from customer/project number
PROJECT_COORDINATES="${CUSTOMER_NUMBER}_${PROJECT_NUMBER}"

echo ""
echo "Customer Number: $CUSTOMER_NUMBER"
echo "Project  Number: $PROJECT_NUMBER"
echo "Site Name      : $SITE_NAME"
echo "Local Url      : $LOCAL_URL"
echo "Staging Url    : $STAGE_URL"
echo ""

echo -n "are this info correct? (YES/NO)? [NO]: "
read confirm
if echo "$confirm" | grep -q "^YES" ;then
    # generate docker-compose.yaml for .dev enviroment
    echo "generating docker-compose.yml for local environment"
    sed \
    -e "s/%%SITENAME%%/$SITE_NAME/" \
    -e "s/%%SITEURL%%/\/\/$LOCAL_URL/" \
    -e "s/%%SITEENV%%/$LOCAL_ENVIRONMENT/" \
    -e "s/%%PROJECTCOORDS%%/$PROJECT_COORDINATES/" \
    $SCRIPT_HOME/docker-compose.yml.tpl > $SCRIPT_HOME/../docker/docker-compose.yml
    echo "generating docker-compose-stage.yml for stage environment"
    # generate docker-compose-stage.yaml for stage enviromnet
    sed \
    -e "s/%%SITENAME%%/$SITE_NAME/" \
    -e "s/%%SITEURL%%/\/\/$STAGE_URL/" \
    -e "s/%%SITEENV%%/$STAGE_ENVIRONMENT/" \
    -e "s/%%PROJECTCOORDS%%/$PROJECT_COORDINATES/" \
    $SCRIPT_HOME/docker-compose.yml.tpl > $SCRIPT_HOME/../docker/docker-compose-stage.yml
    # add env vars to bin/export-schema.yaml
    echo "generating projects scripts"
    # schema export
    printf "%s\n" \
    '#!/bin/sh'   \
    '# autogenerated script, do not edit' \
    "docker exec -it craft_$PROJECT_COORDINATES /data/scripts/schematic-export.sh" \
    > $SCRIPT_HOME/schema-export.sh
    # schema import
    printf "%s\n" \
    '#!/bin/sh'   \
    '# autogenerated script, do not edit' \
    "docker exec -it craft_$PROJECT_COORDINATES /data/scripts/schematic-import.sh" \
    > $SCRIPT_HOME/schema-import.sh
    # start script
    printf "%s\n" \
    '#!/bin/sh'   \
    '# start docker for specific project'   \
    'SCRIPT_HOME=`dirname $0 | while read a; do cd $a && pwd && break; done`' \
    'cd $SCRIPT_HOME/../docker' \
    "docker-compose --project-name $PROJECT_COORDINATES up -d" \
    > $SCRIPT_HOME/start.sh
    # stop script
    printf "%s\n" \
    '#!/bin/sh'   \
    "# stop docker for specific project"   \
    'SCRIPT_HOME=`dirname $0 | while read a; do cd $a && pwd && break; done`' \
    'cd $SCRIPT_HOME/../docker' \
    "docker-compose --project-name $PROJECT_COORDINATES stop" \
    > $SCRIPT_HOME/stop.sh
    # uninstall script
    printf "%s\n" \
    '#!/bin/bash' \
    '# autogenerated script do not edit' \
    'SCRIPT_HOME=`dirname $0 | while read a; do cd $a && pwd && break; done`' \
    'cd $SCRIPT_HOME/../docker' \
    'echo -n "This action will remove all containers including data, do you want to continue (YES/NO)? [NO] "' \
    'read answer' \
    'if echo "$answer" | grep -q "^YES" ;then' \
    '    echo "uninstalling project"' \
    "    docker-compose --project-name $PROJECT_COORDINATES down" \
    'else' \
    '    echo "aborting"' \
    'fi' \
    > $SCRIPT_HOME/unistall.sh
    # change permissions
    chmod +x $SCRIPT_HOME/schema-*.sh $SCRIPT_HOME/start.sh $SCRIPT_HOME/stop.sh $SCRIPT_HOME/unistall.sh
    # all done 
    echo "starting docker"
    cd $SCRIPT_HOME/../docker
    docker-compose --project-name $PROJECT_COORDINATES up -d
else
    echo "setup canceled, bye!"
fi

